# -*- coding: utf-8 -*-
"""CP321A7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCVJTkiWlu9BW8gJ5mfXOME-znuX_Gc6
"""
from dash import Dash, html, dcc, callback, Output, Input
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import json, urllib.request

#Dataset of world cup year, winner, and runner up
fifa_data = [
    {"year": 1930, "winner": "Uruguay", "runner_up": "Argentina"},
    {"year": 1934, "winner": "Italy", "runner_up": "Czechoslovakia"},
    {"year": 1938, "winner": "Italy", "runner_up": "Hungary"},
    {"year": 1950, "winner": "Uruguay", "runner_up": "Brazil"},
    {"year": 1954, "winner": "West Germany", "runner_up": "Hungary"},
    {"year": 1958, "winner": "Brazil", "runner_up": "Sweden"},
    {"year": 1962, "winner": "Brazil", "runner_up": "Czechoslovakia"},
    {"year": 1966, "winner": "England", "runner_up": "West Germany"},
    {"year": 1970, "winner": "Brazil", "runner_up": "Italy"},
    {"year": 1974, "winner": "West Germany", "runner_up": "Netherlands"},
    {"year": 1978, "winner": "Argentina", "runner_up": "Netherlands"},
    {"year": 1982, "winner": "Italy", "runner_up": "West Germany"},
    {"year": 1986, "winner": "Argentina", "runner_up": "West Germany"},
    {"year": 1990, "winner": "West Germany", "runner_up": "Argentina"},
    {"year": 1994, "winner": "Brazil", "runner_up": "Italy"},
    {"year": 1998, "winner": "France", "runner_up": "Brazil"},
    {"year": 2002, "winner": "Brazil", "runner_up": "Germany"},
    {"year": 2006, "winner": "Italy", "runner_up": "France"},
    {"year": 2010, "winner": "Spain", "runner_up": "Netherlands"},
    {"year": 2014, "winner": "Germany", "runner_up": "Argentina"},
    {"year": 2018, "winner": "France", "runner_up": "Croatia"},
    {"year": 2022, "winner": "Argentina", "runner_up": "France"},
]

#All countries that have ever won a World cup
winning_countries = [country["winner"] for country in fifa_data]
winning_countries = sorted(list(set(winning_countries)))
winning_countries.remove("West Germany")

with urllib.request.urlopen("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json") as url:
    geojson = json.loads(url.read().decode())

app = Dash(__name__)
server=app.server
df = pd.DataFrame(fifa_data)

app.layout = html.Div([
    html.H1("FIFA World Cup Winners Dashboard", style={"textAlign": "center"}),

    #Step 2: a
    html.Button("View all countries that have ever won a World Cup", id="button_in", n_clicks=0),
    html.Div(id="button_out", style={"marginTop": 5}),

    #Step 3: b
    html.Label("Select a country and view the number of times it has won the World Cup"),
    dcc.Dropdown(
        id="country_in",
        options=[{"label": country, "value": country} for country in winning_countries],
        placeholder="Select a country",
    ),
    html.Div(id="country_out", style={"marginTop": 5}),

    #Step 4: c
    html.Label("Select a year when a World Cup was organized and view the winner and the runner-up"),
    dcc.Dropdown(
        id="year-in",
        options=[{"label": year, "value": year} for year in [1930, 1934, 1938, 1950, 1954, 1958, 1962, 1966, 1970, 1974, 1978, 1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014, 2018, 2022]],
        placeholder="Select a year",
    ),
    html.Div(id="year-out", style={"marginTop": 5})
])

#Step 2: a
@app.callback(
    Output("button_out", "children"),
    Input("button_in", "n_clicks")
)
def view_winners(n_clicks):
    if n_clicks == 0:
        return ""
    df_view_winners = pd.DataFrame({"country": winning_countries})
    fig = px.choropleth(
        df_view_winners, geojson=geojson,
        color="country", locations="country",
        featureidkey="properties.name", color_discrete_sequence=px.colors.qualitative.Vivid,
        hover_name="country", title="All Countries That Have Ever Won a World Cup",
    )

    fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    fig.update_layout(height=600, legend_title_text="Country", margin={"r":0,"t":75,"l":0,"b":0})
    return dcc.Graph(figure=fig)

#Step 2: b
@app.callback(
    Output("country_out", "children"),
    Input("country_in", "value")
)
def country_win(country):
    if not country:
        return ""
    if country == "Germany":
        years = df[(df["winner"] == "Germany") | (df["winner"] == "West Germany")]["year"].tolist()
    else:
        years = df[df["winner"] == country]["year"].tolist()

    df_country_win = pd.DataFrame({"country": [country]})

    fig = px.choropleth(
        df_country_win, geojson=geojson,
        color="country", locations="country",
        featureidkey="properties.name", color_discrete_sequence=px.colors.qualitative.Vivid,
        hover_name="country", title=f"{country} and Its World Cup Wins"
    )

    fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    fig.update_layout(height=600, legend_title_text="Country", margin={"r": 0, "t": 75, "l": 0, "b": 0})
    return dcc.Graph(figure=fig), f"{country} has won {len(years)} World Cups.\n{country} won in: {', '.join(map(str, years))}"


#Step 2: c
@app.callback(
    Output("year-out", "children"),
    Input("year-in", "value")
)
def display_winner_by_year(selected_year):
    if not selected_year:
        return ""
    winner = df[df["year"] == selected_year]["winner"].iloc[0]
    runner = df[df["year"] == selected_year]["runner_up"].iloc[0]

    if winner == "West Germany": winner = "Germany"
    if runner == "West Germany": runner = "Germany"

    df_year = pd.DataFrame({"country": [winner, runner]})

    fig = px.choropleth(
        df_year,
        geojson=geojson,
        color="country",
        locations="country",
        featureidkey="properties.name",
        color_discrete_sequence=px.colors.qualitative.Vivid,
        hover_name="country",
        title=f"{selected_year} World Cup: Winner and Runner-Up"
    )

    fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    fig.update_layout(height=600, legend_title_text="Country", margin={"r": 0, "t": 75, "l": 0, "b": 0})

    return dcc.Graph(figure=fig), f"The winner of {selected_year} was {winner}. The runner-up was {runner}."

if __name__ == "__main__":
    app.run(debug=True)

